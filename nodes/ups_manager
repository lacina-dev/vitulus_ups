#!/usr/bin/env python
# license removed for brevity
import rospy
from std_msgs.msg import String
from vitulus_ups.msg import vitulus_ups
from turtlebot3_msgs.msg import Sound


ups_msg = vitulus_ups()


def callback_ups(vitulus_ups_msg):
    global ups_msg
    ups_msg = vitulus_ups_msg

def rtd(value):
    return '{:06.2f}'.format(float(value))

def ups_manager():

    pub_sound = rospy.Publisher('/sound', Sound, queue_size=10)
    # upspub = rospy.Publisher('ups', String, queue_size=10)
    bat_pub = rospy.Publisher('ups_manager/battery', String, queue_size=10)
    ups_pub = rospy.Publisher('ups_manager/ups', String, queue_size=10)
    output_pub = rospy.Publisher('ups_manager/output', String, queue_size=10)
    rospy.init_node('ups_manager', anonymous=True)
    rospy.loginfo("Initialising ups_manager node...")
    rate = rospy.Rate(1) # 1hz
    rospy.loginfo("Node initialised.")
    rospy.Subscriber("/ups", vitulus_ups, callback_ups)
    sound_msg = Sound()
    last_msg = vitulus_ups()
    while not rospy.is_shutdown():
        
        # print ups_msg
        
        # check battery status change
        if last_msg.ups_status != ups_msg.ups_status:
            rospy.loginfo("UPS status {}".format(ups_msg.ups_status))
            sound_msg.value = 4
            pub_sound.publish(sound_msg)

        # check battery charge
        if last_msg.battery_capacity != ups_msg.battery_capacity:
            if ups_msg.battery_capacity < 40 and last_msg.battery_capacity > ups_msg.battery_capacity:
                rospy.logwarn("Battery low! {}%".format(ups_msg.battery_capacity))
                sound_msg.value = 2
                pub_sound.publish(sound_msg)

        # check battery charge
        if last_msg.battery_status != ups_msg.battery_status:
            if ups_msg.battery_status == "Charged":
                rospy.loginfo("Battery charged {}%".format(ups_msg.battery_capacity))
                sound_msg.value = 1
                pub_sound.publish(sound_msg)
            if ups_msg.battery_status == "Discharging":
                rospy.loginfo("Battery discharging {}%".format(ups_msg.battery_capacity))
                sound_msg.value = 0
                pub_sound.publish(sound_msg)
            if ups_msg.battery_status == "Charging":
                rospy.loginfo("Battery charging {}%".format(ups_msg.battery_capacity))
                sound_msg.value = 4
                pub_sound.publish(sound_msg)




        out_string = 'BAT: {}  {:3.2f} V  {:3.0f} %'.format(ups_msg.battery_status, float(ups_msg.battery_voltage)/1000, float(ups_msg.battery_capacity))
        bat_pub.publish(out_string)

        pwr = str(int(float(ups_msg.input_voltage) * float(ups_msg.input_current)))
        out_string = 'UPS: {}  {:3.2f} V  {:3.0f} W'.format(ups_msg.ups_status, float(ups_msg.input_voltage)/1000, float(pwr)/1000000)
        ups_pub.publish(out_string)


        pwr = str(int(float(ups_msg.output_voltage) * float(ups_msg.output_current)))
        out_string = 'OUT: {:2.2f} V  {:2.2f} A  {:3.0f} W'.format(float(ups_msg.output_voltage)/1000, float(ups_msg.output_current) / 1000,
                                                   float(pwr)/1000000)
        output_pub.publish(out_string)

        last_msg = ups_msg
        rate.sleep()

if __name__ == '__main__':
    try:
        ups_manager()
    except rospy.ROSInterruptException:
        pass
